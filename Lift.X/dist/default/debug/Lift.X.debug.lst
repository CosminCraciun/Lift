

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Apr 24 13:34:07 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	swtext1,local,class=CONST,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     	;# 
    24  0001                     	;# 
    25  0002                     	;# 
    26  0003                     	;# 
    27  0004                     	;# 
    28  0005                     	;# 
    29  0006                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000E                     	;# 
    34  000E                     	;# 
    35  000F                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0015                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0017                     	;# 
    43  0018                     	;# 
    44  0019                     	;# 
    45  001A                     	;# 
    46  001F                     	;# 
    47  0081                     	;# 
    48  0085                     	;# 
    49  0086                     	;# 
    50  008C                     	;# 
    51  008E                     	;# 
    52  0092                     	;# 
    53  0098                     	;# 
    54  0099                     	;# 
    55  009A                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009F                     	;# 
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009F                     	;# 
    97  0000                     	;# 
    98  0001                     	;# 
    99  0002                     	;# 
   100  0003                     	;# 
   101  0004                     	;# 
   102  0005                     	;# 
   103  0006                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000E                     	;# 
   108  000E                     	;# 
   109  000F                     	;# 
   110  0010                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0015                     	;# 
   114  0015                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001F                     	;# 
   121  0081                     	;# 
   122  0085                     	;# 
   123  0086                     	;# 
   124  008C                     	;# 
   125  008E                     	;# 
   126  0092                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009F                     	;# 
   134                           
   135                           	psect	nvBANK0
   136  004E                     __pnvBANK0:	
   137  004E                     _buttonMode:	
   138  004E                     	ds	1
   139  004F                     _readCurrentState:	
   140  004F                     	ds	1
   141  000E                     _TMR1	set	14
   142  000C                     _PIR1	set	12
   143  000C                     _PIR1bits	set	12
   144  0005                     _PORTAbits	set	5
   145  0006                     _PORTBbits	set	6
   146  0010                     _T1CON	set	16
   147  0010                     _T1CONbits	set	16
   148  008C                     _PIE1bits	set	140
   149  0085                     _TRISA	set	133
   150  0085                     _TRISAbits	set	133
   151  0086                     _TRISB	set	134
   152  0086                     _TRISBbits	set	134
   153                           
   154                           	psect	cinit
   155  0011                     start_initialization:	
   156                           ; #config settings
   157                           
   158  0011                     __initialization:	
   159                           
   160                           ; Clear objects allocated to BANK0
   161  0011  1383               	bcf	3,7	;select IRP bank0
   162  0012  3020               	movlw	low __pbssBANK0
   163  0013  0084               	movwf	4
   164  0014  3042               	movlw	low (__pbssBANK0+34)
   165  0015  2233               	fcall	clear_ram0
   166  0016                     end_of_initialization:	
   167                           ;End of C runtime variable initialization code
   168                           
   169  0016                     __end_of__initialization:	
   170  0016  0183               	clrf	3
   171  0017  28D3               	ljmp	_main	;jump to C main() function
   172                           
   173                           	psect	bssBANK0
   174  0020                     __pbssBANK0:	
   175  0020                     _debounceStates:	
   176  0020                     	ds	10
   177  002A                     _inputs:	
   178  002A                     	ds	9
   179  0033                     _msPassed:	
   180  0033                     	ds	2
   181  0035                     _waiting:	
   182  0035                     	ds	2
   183  0037                     _buttonPressed:	
   184  0037                     	ds	1
   185  0038                     checkLevelChange@pastCounter:	
   186  0038                     	ds	1
   187  0039                     _tempInput:	
   188  0039                     	ds	9
   189                           
   190                           	psect	clrtext
   191  0233                     clear_ram0:	
   192                           ;	Called with FSR containing the base address, and
   193                           ;	W with the last address+1
   194                           
   195  0233  0064               	clrwdt	;clear the watchdog before getting into this loop
   196  0234                     clrloop0:	
   197  0234  0180               	clrf	0	;clear RAM location pointed to by FSR
   198  0235  0A84               	incf	4,f	;increment pointer
   199  0236  0604               	xorwf	4,w	;XOR with final address
   200  0237  1903               	btfsc	3,2	;have we reached the end yet?
   201  0238  3400               	retlw	0	;all done for this memory range, return
   202  0239  0604               	xorwf	4,w	;XOR again to restore value
   203  023A  2A34               	goto	clrloop0	;do the next byte
   204                           
   205                           	psect	cstackCOMMON
   206  0070                     __pcstackCOMMON:	
   207  0070                     ?_InitPorts:	
   208  0070                     ?_InitTimer:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_TurnOnButtons:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_TurnOnLeds:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0070                     ?_SetLeds:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_checkLevelChange:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_DebounceInput:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_Debounce:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_MainInterrupt:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     DebounceInput@tempState:	
   233                           ; 1 bytes @ 0x0
   234                           
   235                           
   236                           ; 1 bytes @ 0x0
   237  0070                     	ds	1
   238  0071                     DebounceInput@currentState:	
   239                           
   240                           ; 1 bytes @ 0x1
   241  0071                     	ds	1
   242  0072                     ??_DebounceInput:	
   243                           
   244                           ; 1 bytes @ 0x2
   245  0072                     	ds	1
   246  0073                     DebounceInput@input:	
   247                           
   248                           ; 1 bytes @ 0x3
   249  0073                     	ds	1
   250  0074                     ??_Debounce:	
   251                           
   252                           ; 1 bytes @ 0x4
   253  0074                     	ds	4
   254  0078                     ??_MainInterrupt:	
   255                           
   256                           ; 1 bytes @ 0x8
   257  0078                     	ds	6
   258                           
   259                           	psect	cstackBANK0
   260  0042                     __pcstackBANK0:	
   261  0042                     ??_InitPorts:	
   262  0042                     ??_InitTimer:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0042                     ??_TurnOnButtons:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0042                     ??_SetLeds:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0042                     ??_checkLevelChange:	
   272                           ; 1 bytes @ 0x0
   273                           
   274                           
   275                           ; 1 bytes @ 0x0
   276  0042                     	ds	1
   277  0043                     checkLevelChange@returnValue:	
   278                           
   279                           ; 1 bytes @ 0x1
   280  0043                     	ds	1
   281  0044                     SetLeds@leds:	
   282                           
   283                           ; 1 bytes @ 0x2
   284  0044                     	ds	1
   285  0045                     ??_TurnOnLeds:	
   286  0045                     ?_main:	
   287                           ; 1 bytes @ 0x3
   288                           
   289  0045                     main@argc:	
   290                           ; 2 bytes @ 0x3
   291                           
   292                           
   293                           ; 2 bytes @ 0x3
   294  0045                     	ds	2
   295  0047                     main@argv:	
   296                           
   297                           ; 2 bytes @ 0x5
   298  0047                     	ds	2
   299  0049                     ??_main:	
   300                           
   301                           ; 1 bytes @ 0x7
   302  0049                     	ds	1
   303  004A                     main@emergencyStop:	
   304                           
   305                           ; 1 bytes @ 0x8
   306  004A                     	ds	1
   307  004B                     main@currentLevel:	
   308                           
   309                           ; 1 bytes @ 0x9
   310  004B                     	ds	1
   311  004C                     main@mainState:	
   312                           
   313                           ; 1 bytes @ 0xA
   314  004C                     	ds	1
   315  004D                     main@movingDirection:	
   316                           
   317                           ; 1 bytes @ 0xB
   318  004D                     	ds	1
   319                           
   320                           	psect	maintext
   321  00D3                     __pmaintext:	
   322 ;;
   323 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   324 ;;
   325 ;; *************** function _main *****************
   326 ;; Defined at:
   327 ;;		line 30 in file "main.c"
   328 ;; Parameters:    Size  Location     Type
   329 ;;  argc            2    3[BANK0 ] int 
   330 ;;  argv            2    5[BANK0 ] PTR PTR unsigned char 
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  movingDirect    1   11[BANK0 ] unsigned char 
   333 ;;  mainState       1   10[BANK0 ] unsigned char 
   334 ;;  currentLevel    1    9[BANK0 ] unsigned char 
   335 ;;  emergencySto    1    8[BANK0 ] unsigned char 
   336 ;; Return value:  Size  Location     Type
   337 ;;                  2    3[BANK0 ] int 
   338 ;; Registers used:
   339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   340 ;; Tracked objects:
   341 ;;		On entry : B00/0
   342 ;;		On exit  : 0/0
   343 ;;		Unchanged: 0/0
   344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   345 ;;      Params:         0       4       0       0
   346 ;;      Locals:         0       4       0       0
   347 ;;      Temps:          0       1       0       0
   348 ;;      Totals:         0       9       0       0
   349 ;;Total ram usage:        9 bytes
   350 ;; Hardware stack levels required when called:    5
   351 ;; This function calls:
   352 ;;		_InitPorts
   353 ;;		_InitTimer
   354 ;;		_SetLeds
   355 ;;		_TurnOnButtons
   356 ;;		_TurnOnLeds
   357 ;;		_checkLevelChange
   358 ;; This function is called by:
   359 ;;		Startup code after reset
   360 ;; This function uses a non-reentrant model
   361 ;;
   362                           
   363                           
   364                           ;psect for function _main
   365  00D3                     _main:	
   366                           
   367                           ;main.c: 32: unsigned char currentLevel = 0;
   368                           
   369                           ;incstack = 0
   370                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   371  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   372  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   373  00D5  01CB               	clrf	main@currentLevel
   374                           
   375                           ;main.c: 33: unsigned char mainState = STATE_STOP;
   376  00D6  01CC               	clrf	main@mainState
   377                           
   378                           ;main.c: 34: unsigned char movingDirection = 0;
   379  00D7  01CD               	clrf	main@movingDirection
   380                           
   381                           ;main.c: 35: unsigned char emergencyStop = 0;
   382  00D8  01CA               	clrf	main@emergencyStop
   383                           
   384                           ;main.c: 37: InitPorts();
   385  00D9  21C8               	fcall	_InitPorts
   386                           
   387                           ;main.c: 38: InitTimer();
   388  00DA  220B               	fcall	_InitTimer
   389                           
   390                           ;main.c: 45: switch (mainState)
   391  00DB  295A               	goto	l971
   392  00DC                     l41:	
   393                           ;main.c: 46: {
   394                           ;main.c: 47: case STATE_STOP :
   395                           
   396                           
   397                           ;main.c: 48: {
   398                           ;main.c: 50: PORTBbits.RB4 = PORTBbits.RB5 = 0;
   399  00DC  1286               	bcf	6,5	;volatile
   400  00DD  1206               	bcf	6,4	;volatile
   401                           
   402                           ;main.c: 52: if ( 0 == buttonMode )
   403  00DE  084E               	movf	_buttonMode,w
   404  00DF  1D03               	btfss	3,2
   405  00E0  28E2               	goto	l977
   406                           
   407                           ;main.c: 53: {
   408                           ;main.c: 54: TurnOnButtons();
   409  00E1  2229               	fcall	_TurnOnButtons
   410  00E2                     l977:	
   411                           
   412                           ;main.c: 55: }
   413                           ;main.c: 57: if (buttonPressed != currentLevel && buttonPressed != 0)
   414  00E2  1283               	bcf	3,5	;RP0=0, select bank0
   415  00E3  1303               	bcf	3,6	;RP1=0, select bank0
   416  00E4  0837               	movf	_buttonPressed,w
   417  00E5  064B               	xorwf	main@currentLevel,w
   418  00E6  1903               	skipnz
   419  00E7  295A               	goto	l971
   420  00E8  0837               	movf	_buttonPressed,w
   421  00E9  1903               	btfsc	3,2
   422  00EA  295A               	goto	l971
   423                           
   424                           ;main.c: 58: {
   425                           ;main.c: 59: TurnOnLeds();
   426  00EB  221C               	fcall	_TurnOnLeds
   427                           
   428                           ;main.c: 61: if (buttonPressed > currentLevel)
   429  00EC  1283               	bcf	3,5	;RP0=0, select bank0
   430  00ED  1303               	bcf	3,6	;RP1=0, select bank0
   431  00EE  0837               	movf	_buttonPressed,w
   432  00EF  024B               	subwf	main@currentLevel,w
   433  00F0  1803               	skipnc
   434  00F1  28F5               	goto	l987
   435                           
   436                           ;main.c: 62: {
   437                           ;main.c: 63: movingDirection = 1;
   438  00F2  01CD               	clrf	main@movingDirection
   439  00F3  0ACD               	incf	main@movingDirection,f
   440                           
   441                           ;main.c: 64: }
   442  00F4  2942               	goto	l1037
   443  00F5                     l987:	
   444                           
   445                           ;main.c: 65: else
   446                           ;main.c: 66: {
   447                           ;main.c: 67: movingDirection = 2;
   448  00F5  3002               	movlw	2
   449  00F6  00C9               	movwf	??_main
   450  00F7  0849               	movf	??_main,w
   451  00F8  00CD               	movwf	main@movingDirection
   452  00F9  2942               	goto	l1037
   453  00FA                     l991:	
   454                           ;main.c: 74: case STATE_CHECK :
   455                           
   456                           ;main.c: 71: }
   457                           ;main.c: 72: }
   458                           ;main.c: 73: break;
   459                           
   460                           ;main.c: 68: }
   461                           ;main.c: 70: mainState = STATE_CHECK;
   462                           
   463                           
   464                           ;main.c: 75: {
   465                           ;main.c: 77: if ( ( 1 == inputs[SAFETY_1_POS] ) ||
   466                           ;main.c: 78: ( 1 == inputs[SAFETY_2_POS] ) ||
   467                           ;main.c: 79: ( 1 == inputs[SAFETY_3_POS] ) )
   468  00FA  032A               	decf	_inputs,w
   469  00FB  1903               	btfsc	3,2
   470  00FC  2902               	goto	l997
   471  00FD  032B               	decf	_inputs+1,w
   472  00FE  1D03               	btfss	3,2
   473  00FF  032C               	decf	_inputs+2,w
   474  0100  1D03               	btfss	3,2
   475  0101  2908               	goto	l1003
   476  0102                     l997:	
   477                           
   478                           ;main.c: 80: {
   479                           ;main.c: 81: mainState = STATE_STOP;
   480  0102  01CC               	clrf	main@mainState
   481                           
   482                           ;main.c: 82: PORTBbits.RB4 = PORTBbits.RB5 = 0;
   483  0103  1286               	bcf	6,5	;volatile
   484  0104  1206               	bcf	6,4	;volatile
   485                           
   486                           ;main.c: 83: SetLeds(0);
   487  0105  3000               	movlw	0
   488  0106  216C               	fcall	_SetLeds
   489                           
   490                           ;main.c: 84: }
   491  0107  295A               	goto	l971
   492  0108                     l1003:	
   493                           
   494                           ;main.c: 85: else if ( currentLevel == buttonPressed )
   495  0108  1283               	bcf	3,5	;RP0=0, select bank0
   496  0109  1303               	bcf	3,6	;RP1=0, select bank0
   497  010A  084B               	movf	main@currentLevel,w
   498  010B  0637               	xorwf	_buttonPressed,w
   499  010C  1D03               	skipz
   500  010D  2911               	goto	l1009
   501                           
   502                           ;main.c: 86: {
   503                           ;main.c: 87: waiting = 0;
   504  010E  01B5               	clrf	_waiting
   505  010F  01B6               	clrf	_waiting+1
   506  0110  2954               	goto	l1047
   507  0111                     l1009:	
   508                           ;main.c: 89: }
   509                           
   510                           ;main.c: 88: mainState = STATE_REACHED;
   511                           
   512                           
   513                           ;main.c: 90: else if ( 2 == movingDirection && 0 != inputs[DELIMITER_DOWN_POS] )
   514  0111  3002               	movlw	2
   515  0112  064D               	xorwf	main@movingDirection,w
   516  0113  1D03               	btfss	3,2
   517  0114  291C               	goto	l1017
   518  0115  082D               	movf	_inputs+3,w
   519  0116  1903               	btfsc	3,2
   520  0117  291C               	goto	l1017
   521                           
   522                           ;main.c: 91: {
   523                           ;main.c: 92: mainState = STATE_STOP;
   524  0118  01CC               	clrf	main@mainState
   525                           
   526                           ;main.c: 93: currentLevel = 1;
   527  0119  01CB               	clrf	main@currentLevel
   528  011A  0ACB               	incf	main@currentLevel,f
   529                           
   530                           ;main.c: 94: }
   531  011B  295A               	goto	l971
   532  011C                     l1017:	
   533                           
   534                           ;main.c: 95: else if ( 1 == movingDirection && 0 != inputs[DELIMITER_UP_POS] )
   535  011C  034D               	decf	main@movingDirection,w
   536  011D  1D03               	btfss	3,2
   537  011E  2928               	goto	l1025
   538  011F  082E               	movf	_inputs+4,w
   539  0120  1903               	btfsc	3,2
   540  0121  2928               	goto	l1025
   541                           
   542                           ;main.c: 96: {
   543                           ;main.c: 97: mainState = STATE_STOP;
   544  0122  01CC               	clrf	main@mainState
   545                           
   546                           ;main.c: 98: currentLevel = 3;
   547  0123  3003               	movlw	3
   548  0124  00C9               	movwf	??_main
   549  0125  0849               	movf	??_main,w
   550  0126  00CB               	movwf	main@currentLevel
   551                           
   552                           ;main.c: 99: }
   553  0127  295A               	goto	l971
   554  0128                     l1025:	
   555                           
   556                           ;main.c: 100: else
   557                           ;main.c: 101: {
   558                           ;main.c: 102: mainState = STATE_RUN;
   559  0128  3002               	movlw	2
   560  0129  2955               	goto	L2
   561  012A                     l1027:	
   562                           ;main.c: 106: case STATE_RUN :
   563                           
   564                           ;main.c: 103: }
   565                           ;main.c: 104: }
   566                           ;main.c: 105: break;
   567                           
   568                           
   569                           ;main.c: 107: {
   570                           ;main.c: 108: if ( 1 == movingDirection )
   571  012A  034D               	decf	main@movingDirection,w
   572  012B  1D03               	btfss	3,2
   573  012C  2930               	goto	l59
   574                           
   575                           ;main.c: 109: {
   576                           ;main.c: 110: PORTBbits.RB5 = 0;
   577  012D  1286               	bcf	6,5	;volatile
   578                           
   579                           ;main.c: 111: PORTBbits.RB4 = 1;
   580  012E  1606               	bsf	6,4	;volatile
   581                           
   582                           ;main.c: 112: }
   583  012F  2932               	goto	l1031
   584  0130                     l59:	
   585                           
   586                           ;main.c: 113: else
   587                           ;main.c: 114: {
   588                           ;main.c: 115: PORTBbits.RB5 = 1;
   589  0130  1686               	bsf	6,5	;volatile
   590                           
   591                           ;main.c: 116: PORTBbits.RB4 = 0;
   592  0131  1206               	bcf	6,4	;volatile
   593  0132                     l1031:	
   594                           
   595                           ;main.c: 117: }
   596                           ;main.c: 118: if ( 1 == movingDirection)
   597  0132  034D               	decf	main@movingDirection,w
   598  0133  1D03               	btfss	3,2
   599  0134  293C               	goto	l1035
   600                           
   601                           ;main.c: 119: {
   602                           ;main.c: 120: currentLevel += checkLevelChange();
   603  0135  21E1               	fcall	_checkLevelChange
   604  0136  1283               	bcf	3,5	;RP0=0, select bank0
   605  0137  1303               	bcf	3,6	;RP1=0, select bank0
   606  0138  00C9               	movwf	??_main
   607  0139  0849               	movf	??_main,w
   608  013A  07CB               	addwf	main@currentLevel,f
   609                           
   610                           ;main.c: 121: }
   611  013B  2942               	goto	l1037
   612  013C                     l1035:	
   613                           
   614                           ;main.c: 122: else
   615                           ;main.c: 123: {
   616                           ;main.c: 124: currentLevel -= checkLevelChange();
   617  013C  21E1               	fcall	_checkLevelChange
   618  013D  1283               	bcf	3,5	;RP0=0, select bank0
   619  013E  1303               	bcf	3,6	;RP1=0, select bank0
   620  013F  00C9               	movwf	??_main
   621  0140  0849               	movf	??_main,w
   622  0141  02CB               	subwf	main@currentLevel,f
   623  0142                     l1037:	
   624                           
   625                           ;main.c: 125: }
   626                           ;main.c: 127: mainState = STATE_CHECK;
   627  0142  01CC               	clrf	main@mainState
   628  0143  0ACC               	incf	main@mainState,f
   629                           
   630                           ;main.c: 128: }
   631                           ;main.c: 129: break;
   632  0144  295A               	goto	l971
   633  0145                     l63:	
   634                           ;main.c: 130: case STATE_REACHED :
   635                           
   636                           
   637                           ;main.c: 131: {
   638                           ;main.c: 132: PORTBbits.RB4 = PORTBbits.RB5 = 0;
   639  0145  1286               	bcf	6,5	;volatile
   640  0146  1206               	bcf	6,4	;volatile
   641                           
   642                           ;main.c: 134: if ( 5000 < waiting )
   643  0147  3013               	movlw	19
   644  0148  0236               	subwf	_waiting+1,w
   645  0149  3089               	movlw	137
   646  014A  1903               	skipnz
   647  014B  0235               	subwf	_waiting,w
   648  014C  1C03               	skipc
   649  014D  2954               	goto	l1047
   650                           
   651                           ;main.c: 135: {
   652                           ;main.c: 136: SetLeds(0);
   653  014E  3000               	movlw	0
   654  014F  216C               	fcall	_SetLeds
   655                           
   656                           ;main.c: 137: TurnOnButtons();
   657  0150  2229               	fcall	_TurnOnButtons
   658                           
   659                           ;main.c: 138: mainState = STATE_STOP;
   660  0151  1283               	bcf	3,5	;RP0=0, select bank0
   661  0152  1303               	bcf	3,6	;RP1=0, select bank0
   662  0153  2959               	goto	l1049
   663  0154                     l1047:	
   664                           ;main.c: 139: }
   665                           
   666                           
   667                           ;main.c: 140: else
   668                           ;main.c: 141: {
   669                           ;main.c: 142: mainState = STATE_REACHED;
   670  0154  3003               	movlw	3
   671  0155                     L2:	
   672  0155  00C9               	movwf	??_main
   673  0156  0849               	movf	??_main,w
   674  0157  00CC               	movwf	main@mainState
   675                           
   676                           ;main.c: 143: }
   677                           ;main.c: 145: }
   678                           ;main.c: 146: break;
   679  0158  295A               	goto	l971
   680  0159                     l1049:	
   681                           ;main.c: 147: default:
   682                           
   683                           
   684                           ;main.c: 148: {
   685                           ;main.c: 149: mainState = STATE_STOP;
   686  0159  01CC               	clrf	main@mainState
   687  015A                     l971:	
   688                           ;main.c: 41: while (1)
   689                           
   690                           ;main.c: 150: }
   691                           ;main.c: 151: }
   692                           
   693                           
   694                           ;main.c: 42: {
   695                           ;main.c: 43: readCurrentState = mainState;
   696  015A  1283               	bcf	3,5	;RP0=0, select bank0
   697  015B  1303               	bcf	3,6	;RP1=0, select bank0
   698  015C  084C               	movf	main@mainState,w
   699  015D  00C9               	movwf	??_main
   700  015E  0849               	movf	??_main,w
   701  015F  00CF               	movwf	_readCurrentState
   702  0160  084C               	movf	main@mainState,w
   703                           
   704                           ; Switch size 1, requested type "space"
   705                           ; Number of cases is 4, Range of values is 0 to 3
   706                           ; switch strategies available:
   707                           ; Name         Instructions Cycles
   708                           ; direct_byte           10     6 (fixed)
   709                           ; simple_byte           13     7 (average)
   710                           ; jumptable            260     6 (fixed)
   711                           ;	Chosen strategy is direct_byte
   712  0161  0084               	movwf	4
   713  0162  3004               	movlw	4
   714  0163  0204               	subwf	4,w
   715  0164  1803               	skipnc
   716  0165  2959               	goto	l1049
   717  0166  3002               	movlw	high S1103
   718  0167  008A               	movwf	10
   719  0168  303B               	movlw	low S1103
   720  0169  0704               	addwf	4,w
   721  016A  0082               	movwf	2
   722  016B  295A               	goto	l971
   723  016C                     __end_of_main:	
   724                           ;main.c: 152: }
   725                           ;main.c: 154: return (0);
   726                           ;	Return value of _main is never used
   727                           
   728                           
   729                           	psect	swtext1
   730  023B                     __pswtext1:	
   731  023B                     S1103:	
   732  023B  28DC               	ljmp	l41
   733  023C  28FA               	ljmp	l991
   734  023D  292A               	ljmp	l1027
   735  023E  2945               	ljmp	l63
   736                           
   737                           	psect	text1
   738  01E1                     __ptext1:	
   739 ;; *************** function _checkLevelChange *****************
   740 ;; Defined at:
   741 ;;		line 179 in file "main.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;		None
   744 ;; Auto vars:     Size  Location     Type
   745 ;;  returnValue     1    1[BANK0 ] unsigned char 
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      unsigned char 
   748 ;; Registers used:
   749 ;;		wreg, status,2, status,0
   750 ;; Tracked objects:
   751 ;;		On entry : 0/0
   752 ;;		On exit  : 0/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   755 ;;      Params:         0       0       0       0
   756 ;;      Locals:         0       1       0       0
   757 ;;      Temps:          0       1       0       0
   758 ;;      Totals:         0       2       0       0
   759 ;;Total ram usage:        2 bytes
   760 ;; Hardware stack levels used:    1
   761 ;; Hardware stack levels required when called:    3
   762 ;; This function calls:
   763 ;;		Nothing
   764 ;; This function is called by:
   765 ;;		_main
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           
   770                           ;psect for function _checkLevelChange
   771  01E1                     _checkLevelChange:	
   772                           
   773                           ;main.c: 181: static unsigned char pastCounter;
   774                           ;main.c: 182: unsigned char returnValue = 0;
   775                           
   776                           ;incstack = 0
   777                           ; Regs used in _checkLevelChange: [wreg+status,2+status,0]
   778  01E1  1283               	bcf	3,5	;RP0=0, select bank0
   779  01E2  1303               	bcf	3,6	;RP1=0, select bank0
   780  01E3  01C3               	clrf	checkLevelChange@returnValue
   781                           
   782                           ;main.c: 184: if ( 1 == pastCounter && 0 == inputs[COUNTER_POS])
   783  01E4  0338               	decf	checkLevelChange@pastCounter,w
   784  01E5  1903               	btfsc	3,2
   785  01E6  082F               	movf	_inputs+5,w
   786  01E7  1903               	btfsc	3,2
   787  01E8  29F1               	goto	l943
   788                           
   789                           ;main.c: 188: else if ( 0 == pastCounter && 1 == inputs[COUNTER_POS])
   790                           
   791                           ;main.c: 185: {
   792                           ;main.c: 187: }
   793  01E9  0838               	movf	checkLevelChange@pastCounter,w
   794  01EA  1D03               	btfss	3,2
   795  01EB  29F1               	goto	l943
   796  01EC  032F               	decf	_inputs+5,w
   797  01ED  1D03               	btfss	3,2
   798  01EE  29F1               	goto	l943
   799                           
   800                           ;main.c: 189: {
   801                           ;main.c: 191: returnValue = 1;
   802  01EF  01C3               	clrf	checkLevelChange@returnValue
   803  01F0  0AC3               	incf	checkLevelChange@returnValue,f
   804  01F1                     l943:	
   805                           
   806                           ;main.c: 192: }
   807                           ;main.c: 194: pastCounter = inputs[COUNTER_POS];
   808  01F1  082F               	movf	_inputs+5,w
   809  01F2  00C2               	movwf	??_checkLevelChange
   810  01F3  0842               	movf	??_checkLevelChange,w
   811  01F4  00B8               	movwf	checkLevelChange@pastCounter
   812                           
   813                           ;main.c: 196: return returnValue;
   814  01F5  0843               	movf	checkLevelChange@returnValue,w
   815  01F6  0008               	return
   816  01F7                     __end_of_checkLevelChange:	
   817                           
   818                           	psect	text2
   819  021C                     __ptext2:	
   820 ;; *************** function _TurnOnLeds *****************
   821 ;; Defined at:
   822 ;;		line 47 in file "ports.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, status,2, status,0, pclath, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   836 ;;      Params:         0       0       0       0
   837 ;;      Locals:         0       0       0       0
   838 ;;      Temps:          0       0       0       0
   839 ;;      Totals:         0       0       0       0
   840 ;;Total ram usage:        0 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    4
   843 ;; This function calls:
   844 ;;		_SetLeds
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           
   851                           ;psect for function _TurnOnLeds
   852  021C                     _TurnOnLeds:	
   853                           
   854                           ;ports.c: 49: buttonMode = 0;
   855                           
   856                           ;incstack = 0
   857                           ; Regs used in _TurnOnLeds: [wreg+status,2+status,0+pclath+cstack]
   858  021C  1283               	bcf	3,5	;RP0=0, select bank0
   859  021D  1303               	bcf	3,6	;RP1=0, select bank0
   860  021E  01CE               	clrf	_buttonMode
   861                           
   862                           ;ports.c: 51: TRISAbits.TRISA5 = 0;
   863  021F  1683               	bsf	3,5	;RP0=1, select bank1
   864  0220  1303               	bcf	3,6	;RP1=0, select bank1
   865  0221  1285               	bcf	5,5	;volatile
   866                           
   867                           ;ports.c: 52: TRISBbits.TRISB0 = 0;
   868  0222  1006               	bcf	6,0	;volatile
   869                           
   870                           ;ports.c: 53: TRISBbits.TRISB3 = 0;
   871  0223  1186               	bcf	6,3	;volatile
   872                           
   873                           ;ports.c: 55: SetLeds(buttonPressed);
   874  0224  1283               	bcf	3,5	;RP0=0, select bank0
   875  0225  1303               	bcf	3,6	;RP1=0, select bank0
   876  0226  0837               	movf	_buttonPressed,w
   877  0227  216C               	fcall	_SetLeds
   878  0228  0008               	return
   879  0229                     __end_of_TurnOnLeds:	
   880                           
   881                           	psect	text3
   882  016C                     __ptext3:	
   883 ;; *************** function _SetLeds *****************
   884 ;; Defined at:
   885 ;;		line 58 in file "ports.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;  leds            1    wreg     unsigned char 
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  leds            1    2[BANK0 ] unsigned char 
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg, status,2, status,0
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   899 ;;      Params:         0       0       0       0
   900 ;;      Locals:         0       1       0       0
   901 ;;      Temps:          0       2       0       0
   902 ;;      Totals:         0       3       0       0
   903 ;;Total ram usage:        3 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    3
   906 ;; This function calls:
   907 ;;		Nothing
   908 ;; This function is called by:
   909 ;;		_main
   910 ;;		_TurnOnLeds
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           
   915                           ;psect for function _SetLeds
   916  016C                     _SetLeds:	
   917                           
   918                           ;incstack = 0
   919                           ; Regs used in _SetLeds: [wreg+status,2+status,0]
   920                           ;SetLeds@leds stored from wreg
   921  016C  1283               	bcf	3,5	;RP0=0, select bank0
   922  016D  1303               	bcf	3,6	;RP1=0, select bank0
   923  016E  00C4               	movwf	SetLeds@leds
   924                           
   925                           ;ports.c: 60: PORTAbits.RA5 = leds & 0x01;
   926  016F  0844               	movf	SetLeds@leds,w
   927  0170  3901               	andlw	1
   928  0171  00C2               	movwf	??_SetLeds
   929  0172  0EC2               	swapf	??_SetLeds,f
   930  0173  0DC2               	rlf	??_SetLeds,f
   931  0174  0805               	movf	5,w	;volatile
   932  0175  0642               	xorwf	??_SetLeds,w
   933  0176  39DF               	andlw	-33
   934  0177  0642               	xorwf	??_SetLeds,w
   935  0178  0085               	movwf	5	;volatile
   936                           
   937                           ;ports.c: 61: PORTBbits.RB0 = (leds >> 1) & 0x01;
   938  0179  0844               	movf	SetLeds@leds,w
   939  017A  00C2               	movwf	??_SetLeds
   940  017B  3001               	movlw	1
   941  017C                     u285:	
   942  017C  1003               	clrc
   943  017D  0CC2               	rrf	??_SetLeds,f
   944  017E  3EFF               	addlw	-1
   945  017F  1D03               	skipz
   946  0180  297C               	goto	u285
   947  0181  3001               	movlw	1
   948  0182  0542               	andwf	??_SetLeds,w
   949  0183  00C3               	movwf	??_SetLeds+1
   950  0184  0806               	movf	6,w	;volatile
   951  0185  0643               	xorwf	??_SetLeds+1,w
   952  0186  39FE               	andlw	-2
   953  0187  0643               	xorwf	??_SetLeds+1,w
   954  0188  0086               	movwf	6	;volatile
   955                           
   956                           ;ports.c: 62: PORTBbits.RB3 = (leds >> 2) & 0x01;
   957  0189  0844               	movf	SetLeds@leds,w
   958  018A  00C2               	movwf	??_SetLeds
   959  018B  3002               	movlw	2
   960  018C                     u295:	
   961  018C  1003               	clrc
   962  018D  0CC2               	rrf	??_SetLeds,f
   963  018E  3EFF               	addlw	-1
   964  018F  1D03               	skipz
   965  0190  298C               	goto	u295
   966  0191  0842               	movf	??_SetLeds,w
   967  0192  3901               	andlw	1
   968  0193  00C3               	movwf	??_SetLeds+1
   969  0194  0DC3               	rlf	??_SetLeds+1,f
   970  0195  0DC3               	rlf	??_SetLeds+1,f
   971  0196  0DC3               	rlf	??_SetLeds+1,f
   972  0197  0806               	movf	6,w	;volatile
   973  0198  0643               	xorwf	??_SetLeds+1,w
   974  0199  39F7               	andlw	-9
   975  019A  0643               	xorwf	??_SetLeds+1,w
   976  019B  0086               	movwf	6	;volatile
   977  019C  0008               	return
   978  019D                     __end_of_SetLeds:	
   979                           
   980                           	psect	text4
   981  020B                     __ptext4:	
   982 ;; *************** function _InitTimer *****************
   983 ;; Defined at:
   984 ;;		line 8 in file "timer.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;		None
   987 ;; Auto vars:     Size  Location     Type
   988 ;;		None
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg, status,2, status,0
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   998 ;;      Params:         0       0       0       0
   999 ;;      Locals:         0       0       0       0
  1000 ;;      Temps:          0       0       0       0
  1001 ;;      Totals:         0       0       0       0
  1002 ;;Total ram usage:        0 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; Hardware stack levels required when called:    3
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           
  1013                           ;psect for function _InitTimer
  1014  020B                     _InitTimer:	
  1015                           
  1016                           ;timer.c: 10: msPassed = 0;
  1017                           
  1018                           ;incstack = 0
  1019                           ; Regs used in _InitTimer: [wreg+status,2+status,0]
  1020  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1021  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1022  020D  01B3               	clrf	_msPassed
  1023  020E  01B4               	clrf	_msPassed+1
  1024                           
  1025                           ;timer.c: 13: T1CON = 0;
  1026  020F  0190               	clrf	16	;volatile
  1027                           
  1028                           ;timer.c: 16: T1CONbits.T1CKPS = 0b11;
  1029  0210  3030               	movlw	48
  1030  0211  0490               	iorwf	16,f	;volatile
  1031                           
  1032                           ;timer.c: 17: TMR1 = 0xFFFF - 625;
  1033  0212  30FD               	movlw	253
  1034  0213  008F               	movwf	15	;volatile
  1035  0214  308E               	movlw	142
  1036  0215  008E               	movwf	14	;volatile
  1037                           
  1038                           ;timer.c: 20: PIR1bits.TMR1IF = 0;
  1039  0216  100C               	bcf	12,0	;volatile
  1040                           
  1041                           ;timer.c: 23: T1CONbits.TMR1ON = 1;
  1042  0217  1410               	bsf	16,0	;volatile
  1043                           
  1044                           ;timer.c: 26: PIE1bits.TMR1IE = 1;
  1045  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1046  0219  1303               	bcf	3,6	;RP1=0, select bank1
  1047  021A  140C               	bsf	12,0	;volatile
  1048  021B  0008               	return
  1049  021C                     __end_of_InitTimer:	
  1050                           
  1051                           	psect	text5
  1052  01C8                     __ptext5:	
  1053 ;; *************** function _InitPorts *****************
  1054 ;; Defined at:
  1055 ;;		line 13 in file "ports.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0, pclath, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1069 ;;      Params:         0       0       0       0
  1070 ;;      Locals:         0       0       0       0
  1071 ;;      Temps:          0       0       0       0
  1072 ;;      Totals:         0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    4
  1076 ;; This function calls:
  1077 ;;		_TurnOnButtons
  1078 ;; This function is called by:
  1079 ;;		_main
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           
  1084                           ;psect for function _InitPorts
  1085  01C8                     _InitPorts:	
  1086                           
  1087                           ;ports.c: 16: TRISA = 0xFF;
  1088                           
  1089                           ;incstack = 0
  1090                           ; Regs used in _InitPorts: [wreg+status,2+status,0+pclath+cstack]
  1091  01C8  30FF               	movlw	255
  1092  01C9  1683               	bsf	3,5	;RP0=1, select bank1
  1093  01CA  1303               	bcf	3,6	;RP1=0, select bank1
  1094  01CB  0085               	movwf	5	;volatile
  1095                           
  1096                           ;ports.c: 17: TRISB = 0xFF;
  1097  01CC  30FF               	movlw	255
  1098  01CD  0086               	movwf	6	;volatile
  1099                           
  1100                           ;ports.c: 19: TRISAbits.TRISA2 = 0;
  1101  01CE  1105               	bcf	5,2	;volatile
  1102                           
  1103                           ;ports.c: 20: TRISAbits.TRISA3 = 0;
  1104  01CF  1185               	bcf	5,3	;volatile
  1105                           
  1106                           ;ports.c: 21: TRISAbits.TRISA4 = 0;
  1107  01D0  1205               	bcf	5,4	;volatile
  1108                           
  1109                           ;ports.c: 23: TurnOnButtons();
  1110  01D1  2229               	fcall	_TurnOnButtons
  1111                           
  1112                           ;ports.c: 25: TRISBbits.TRISB6 = 1;
  1113  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  1114  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  1115  01D4  1706               	bsf	6,6	;volatile
  1116                           
  1117                           ;ports.c: 26: TRISBbits.TRISB7 = 1;
  1118  01D5  1786               	bsf	6,7	;volatile
  1119                           
  1120                           ;ports.c: 27: TRISAbits.TRISA6 = 1;
  1121  01D6  1705               	bsf	5,6	;volatile
  1122                           
  1123                           ;ports.c: 29: PORTBbits.RB4 = 0;
  1124  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1125  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1126  01D9  1206               	bcf	6,4	;volatile
  1127                           
  1128                           ;ports.c: 30: PORTBbits.RB5 = 0;
  1129  01DA  1286               	bcf	6,5	;volatile
  1130                           
  1131                           ;ports.c: 32: TRISAbits.TRISA7 = 1;
  1132  01DB  1683               	bsf	3,5	;RP0=1, select bank1
  1133  01DC  1303               	bcf	3,6	;RP1=0, select bank1
  1134  01DD  1785               	bsf	5,7	;volatile
  1135                           
  1136                           ;ports.c: 33: TRISAbits.TRISA0 = 1;
  1137  01DE  1405               	bsf	5,0	;volatile
  1138                           
  1139                           ;ports.c: 35: TRISAbits.TRISA1 = 1;
  1140  01DF  1485               	bsf	5,1	;volatile
  1141  01E0  0008               	return
  1142  01E1                     __end_of_InitPorts:	
  1143                           
  1144                           	psect	text6
  1145  0229                     __ptext6:	
  1146 ;; *************** function _TurnOnButtons *****************
  1147 ;; Defined at:
  1148 ;;		line 38 in file "ports.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;		None
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;		None
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      void 
  1155 ;; Registers used:
  1156 ;;		None
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1162 ;;      Params:         0       0       0       0
  1163 ;;      Locals:         0       0       0       0
  1164 ;;      Temps:          0       0       0       0
  1165 ;;      Totals:         0       0       0       0
  1166 ;;Total ram usage:        0 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    3
  1169 ;; This function calls:
  1170 ;;		Nothing
  1171 ;; This function is called by:
  1172 ;;		_main
  1173 ;;		_InitPorts
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           
  1178                           ;psect for function _TurnOnButtons
  1179  0229                     _TurnOnButtons:	
  1180                           
  1181                           ;ports.c: 40: buttonMode = 1;
  1182                           
  1183                           ;incstack = 0
  1184                           ; Regs used in _TurnOnButtons: []
  1185  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1186  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1187  022B  01CE               	clrf	_buttonMode
  1188  022C  0ACE               	incf	_buttonMode,f
  1189                           
  1190                           ;ports.c: 42: TRISAbits.TRISA5 = 1;
  1191  022D  1683               	bsf	3,5	;RP0=1, select bank1
  1192  022E  1303               	bcf	3,6	;RP1=0, select bank1
  1193  022F  1685               	bsf	5,5	;volatile
  1194                           
  1195                           ;ports.c: 43: TRISBbits.TRISB0 = 1;
  1196  0230  1406               	bsf	6,0	;volatile
  1197                           
  1198                           ;ports.c: 44: TRISBbits.TRISB3 = 1;
  1199  0231  1586               	bsf	6,3	;volatile
  1200  0232  0008               	return
  1201  0233                     __end_of_TurnOnButtons:	
  1202                           
  1203                           	psect	text7
  1204  019D                     __ptext7:	
  1205 ;; *************** function _MainInterrupt *****************
  1206 ;; Defined at:
  1207 ;;		line 199 in file "main.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1221 ;;      Params:         0       0       0       0
  1222 ;;      Locals:         0       0       0       0
  1223 ;;      Temps:          6       0       0       0
  1224 ;;      Totals:         6       0       0       0
  1225 ;;Total ram usage:        6 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    2
  1228 ;; This function calls:
  1229 ;;		_Debounce
  1230 ;; This function is called by:
  1231 ;;		Interrupt level 1
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           
  1236                           ;psect for function _MainInterrupt
  1237  019D                     _MainInterrupt:	
  1238                           
  1239                           ;main.c: 202: if ( 1 == PIR1bits.TMR1IF )
  1240  019D  1C0C               	btfss	12,0	;volatile
  1241  019E  29BA               	goto	i1l1071
  1242                           
  1243                           ;main.c: 203: {
  1244                           ;main.c: 204: msPassed++;
  1245  019F  3001               	movlw	1
  1246  01A0  07B3               	addwf	_msPassed,f
  1247  01A1  1803               	skipnc
  1248  01A2  0AB4               	incf	_msPassed+1,f
  1249  01A3  3000               	movlw	0
  1250  01A4  07B4               	addwf	_msPassed+1,f
  1251                           
  1252                           ;main.c: 206: if ( STATE_REACHED == readCurrentState )
  1253  01A5  3003               	movlw	3
  1254  01A6  064F               	xorwf	_readCurrentState,w
  1255  01A7  1D03               	btfss	3,2
  1256  01A8  29AF               	goto	i1l1067
  1257                           
  1258                           ;main.c: 207: {
  1259                           ;main.c: 208: waiting++;
  1260  01A9  3001               	movlw	1
  1261  01AA  07B5               	addwf	_waiting,f
  1262  01AB  1803               	skipnc
  1263  01AC  0AB6               	incf	_waiting+1,f
  1264  01AD  3000               	movlw	0
  1265  01AE  07B6               	addwf	_waiting+1,f
  1266  01AF                     i1l1067:	
  1267                           
  1268                           ;main.c: 209: }
  1269                           ;main.c: 211: if (msPassed % 4 == 0)
  1270  01AF  3003               	movlw	3
  1271  01B0  0533               	andwf	_msPassed,w
  1272  01B1  00F8               	movwf	??_MainInterrupt
  1273  01B2  3000               	movlw	0
  1274  01B3  0534               	andwf	_msPassed+1,w
  1275  01B4  00F9               	movwf	??_MainInterrupt+1
  1276  01B5  0878               	movf	??_MainInterrupt,w
  1277  01B6  0479               	iorwf	??_MainInterrupt+1,w
  1278  01B7  1D03               	btfss	3,2
  1279  01B8  29BA               	goto	i1l1071
  1280                           
  1281                           ;main.c: 212: {
  1282                           ;main.c: 213: Debounce();
  1283  01B9  2018               	fcall	_Debounce
  1284  01BA                     i1l1071:	
  1285                           
  1286                           ;main.c: 214: }
  1287                           ;main.c: 215: }
  1288                           ;main.c: 218: PIR1 = 0;
  1289  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1290  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1291  01BC  018C               	clrf	12	;volatile
  1292  01BD  087D               	movf	??_MainInterrupt+5,w
  1293  01BE  00FF               	movwf	127
  1294  01BF  087C               	movf	??_MainInterrupt+4,w
  1295  01C0  008A               	movwf	10
  1296  01C1  087B               	movf	??_MainInterrupt+3,w
  1297  01C2  0084               	movwf	4
  1298  01C3  0E7A               	swapf	(??_MainInterrupt+2)^(0+-128),w
  1299  01C4  0083               	movwf	3
  1300  01C5  0EFE               	swapf	126,f
  1301  01C6  0E7E               	swapf	126,w
  1302  01C7  0009               	retfie
  1303  01C8                     __end_of_MainInterrupt:	
  1304                           
  1305                           	psect	intentry
  1306  0004                     __pintentry:	
  1307                           ;incstack = 0
  1308                           ; Regs used in _MainInterrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1309                           
  1310  0004                     interrupt_function:	
  1311  007E                     saved_w	set	btemp
  1312  0004  00FE               	movwf	btemp
  1313  0005  0E03               	swapf	3,w
  1314  0006  00FA               	movwf	??_MainInterrupt+2
  1315  0007  0804               	movf	4,w
  1316  0008  00FB               	movwf	??_MainInterrupt+3
  1317  0009  080A               	movf	10,w
  1318  000A  00FC               	movwf	??_MainInterrupt+4
  1319  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1320  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1321  000D  087F               	movf	btemp+1,w
  1322  000E  00FD               	movwf	??_MainInterrupt+5
  1323  000F  299D               	ljmp	_MainInterrupt
  1324                           
  1325                           	psect	text8
  1326  0018                     __ptext8:	
  1327 ;; *************** function _Debounce *****************
  1328 ;; Defined at:
  1329 ;;		line 157 in file "main.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;		None
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;		None
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  1    wreg      void 
  1336 ;; Registers used:
  1337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1343 ;;      Params:         0       0       0       0
  1344 ;;      Locals:         0       0       0       0
  1345 ;;      Temps:          4       0       0       0
  1346 ;;      Totals:         4       0       0       0
  1347 ;;Total ram usage:        4 bytes
  1348 ;; Hardware stack levels used:    1
  1349 ;; Hardware stack levels required when called:    1
  1350 ;; This function calls:
  1351 ;;		_DebounceInput
  1352 ;; This function is called by:
  1353 ;;		_MainInterrupt
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           
  1358                           ;psect for function _Debounce
  1359  0018                     _Debounce:	
  1360                           
  1361                           ;main.c: 159: inputs[SAFETY_1_POS] = DebounceInput(PORTBbits.RB6,tempInput + SAFETY_1_PO
      +                          S, inputs[SAFETY_1_POS]);
  1362                           
  1363                           ;incstack = 0
  1364                           ; Regs used in _Debounce: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1365  0018  3039               	movlw	(low (_tempInput| 0))& (0+255)
  1366  0019  00F4               	movwf	??_Debounce
  1367  001A  0874               	movf	??_Debounce,w
  1368  001B  00F0               	movwf	DebounceInput@tempState
  1369  001C  1283               	bcf	3,5	;RP0=0, select bank0
  1370  001D  1303               	bcf	3,6	;RP1=0, select bank0
  1371  001E  082A               	movf	_inputs,w
  1372  001F  00F5               	movwf	??_Debounce+1
  1373  0020  0875               	movf	??_Debounce+1,w
  1374  0021  00F1               	movwf	DebounceInput@currentState
  1375  0022  0E06               	swapf	6,w	;volatile
  1376  0023  00F6               	movwf	??_Debounce+2
  1377  0024  0CF6               	rrf	??_Debounce+2,f
  1378  0025  0C76               	rrf	??_Debounce+2,w
  1379  0026  3901               	andlw	1
  1380  0027  21F7               	fcall	_DebounceInput
  1381  0028  00F7               	movwf	??_Debounce+3
  1382  0029  0877               	movf	??_Debounce+3,w
  1383  002A  1283               	bcf	3,5	;RP0=0, select bank0
  1384  002B  1303               	bcf	3,6	;RP1=0, select bank0
  1385  002C  00AA               	movwf	_inputs
  1386                           
  1387                           ;main.c: 160: inputs[SAFETY_2_POS] = DebounceInput(PORTBbits.RB7,tempInput + SAFETY_2_PO
      +                          S, inputs[SAFETY_2_POS]);
  1388  002D  303A               	movlw	(low ((_tempInput| 0+1)))& (0+255)
  1389  002E  00F4               	movwf	??_Debounce
  1390  002F  0874               	movf	??_Debounce,w
  1391  0030  00F0               	movwf	DebounceInput@tempState
  1392  0031  082B               	movf	_inputs+1,w
  1393  0032  00F5               	movwf	??_Debounce+1
  1394  0033  0875               	movf	??_Debounce+1,w
  1395  0034  00F1               	movwf	DebounceInput@currentState
  1396  0035  0D06               	rlf	6,w	;volatile
  1397  0036  0D06               	rlf	6,w	;volatile
  1398  0037  3901               	andlw	1
  1399  0038  21F7               	fcall	_DebounceInput
  1400  0039  00F6               	movwf	??_Debounce+2
  1401  003A  0876               	movf	??_Debounce+2,w
  1402  003B  1283               	bcf	3,5	;RP0=0, select bank0
  1403  003C  1303               	bcf	3,6	;RP1=0, select bank0
  1404  003D  00AB               	movwf	_inputs+1
  1405                           
  1406                           ;main.c: 161: inputs[SAFETY_3_POS] = DebounceInput(PORTAbits.RA6,tempInput + SAFETY_3_PO
      +                          S, inputs[SAFETY_3_POS]);
  1407  003E  303B               	movlw	(low ((_tempInput| 0+2)))& (0+255)
  1408  003F  00F4               	movwf	??_Debounce
  1409  0040  0874               	movf	??_Debounce,w
  1410  0041  00F0               	movwf	DebounceInput@tempState
  1411  0042  082C               	movf	_inputs+2,w
  1412  0043  00F5               	movwf	??_Debounce+1
  1413  0044  0875               	movf	??_Debounce+1,w
  1414  0045  00F1               	movwf	DebounceInput@currentState
  1415  0046  0E05               	swapf	5,w	;volatile
  1416  0047  00F6               	movwf	??_Debounce+2
  1417  0048  0CF6               	rrf	??_Debounce+2,f
  1418  0049  0C76               	rrf	??_Debounce+2,w
  1419  004A  3901               	andlw	1
  1420  004B  21F7               	fcall	_DebounceInput
  1421  004C  00F7               	movwf	??_Debounce+3
  1422  004D  0877               	movf	??_Debounce+3,w
  1423  004E  1283               	bcf	3,5	;RP0=0, select bank0
  1424  004F  1303               	bcf	3,6	;RP1=0, select bank0
  1425  0050  00AC               	movwf	_inputs+2
  1426                           
  1427                           ;main.c: 162: inputs[DELIMITER_DOWN_POS] = DebounceInput(PORTAbits.RA7,tempInput + DELIM
      +                          ITER_DOWN_POS, inputs[DELIMITER_DOWN_POS]);
  1428  0051  303C               	movlw	(low ((_tempInput| 0+3)))& (0+255)
  1429  0052  00F4               	movwf	??_Debounce
  1430  0053  0874               	movf	??_Debounce,w
  1431  0054  00F0               	movwf	DebounceInput@tempState
  1432  0055  082D               	movf	_inputs+3,w
  1433  0056  00F5               	movwf	??_Debounce+1
  1434  0057  0875               	movf	??_Debounce+1,w
  1435  0058  00F1               	movwf	DebounceInput@currentState
  1436  0059  0D05               	rlf	5,w	;volatile
  1437  005A  0D05               	rlf	5,w	;volatile
  1438  005B  3901               	andlw	1
  1439  005C  21F7               	fcall	_DebounceInput
  1440  005D  00F6               	movwf	??_Debounce+2
  1441  005E  0876               	movf	??_Debounce+2,w
  1442  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1443  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1444  0061  00AD               	movwf	_inputs+3
  1445                           
  1446                           ;main.c: 163: inputs[DELIMITER_UP_POS] = DebounceInput(PORTAbits.RA0,tempInput + DELIMIT
      +                          ER_UP_POS, inputs[DELIMITER_UP_POS]);
  1447  0062  303D               	movlw	(low ((_tempInput| 0+4)))& (0+255)
  1448  0063  00F4               	movwf	??_Debounce
  1449  0064  0874               	movf	??_Debounce,w
  1450  0065  00F0               	movwf	DebounceInput@tempState
  1451  0066  082E               	movf	_inputs+4,w
  1452  0067  00F5               	movwf	??_Debounce+1
  1453  0068  0875               	movf	??_Debounce+1,w
  1454  0069  00F1               	movwf	DebounceInput@currentState
  1455  006A  0805               	movf	5,w	;volatile
  1456  006B  3901               	andlw	1
  1457  006C  21F7               	fcall	_DebounceInput
  1458  006D  00F6               	movwf	??_Debounce+2
  1459  006E  0876               	movf	??_Debounce+2,w
  1460  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1461  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1462  0071  00AE               	movwf	_inputs+4
  1463                           
  1464                           ;main.c: 164: inputs[COUNTER_POS] = DebounceInput(PORTAbits.RA1,tempInput + COUNTER_POS,
      +                           inputs[COUNTER_POS]);
  1465  0072  303E               	movlw	(low ((_tempInput| 0+5)))& (0+255)
  1466  0073  00F4               	movwf	??_Debounce
  1467  0074  0874               	movf	??_Debounce,w
  1468  0075  00F0               	movwf	DebounceInput@tempState
  1469  0076  082F               	movf	_inputs+5,w
  1470  0077  00F5               	movwf	??_Debounce+1
  1471  0078  0875               	movf	??_Debounce+1,w
  1472  0079  00F1               	movwf	DebounceInput@currentState
  1473  007A  0C05               	rrf	5,w	;volatile
  1474  007B  3901               	andlw	1
  1475  007C  21F7               	fcall	_DebounceInput
  1476  007D  00F6               	movwf	??_Debounce+2
  1477  007E  0876               	movf	??_Debounce+2,w
  1478  007F  1283               	bcf	3,5	;RP0=0, select bank0
  1479  0080  1303               	bcf	3,6	;RP1=0, select bank0
  1480  0081  00AF               	movwf	_inputs+5
  1481                           
  1482                           ;main.c: 166: if (1 == buttonMode)
  1483  0082  034E               	decf	_buttonMode,w
  1484  0083  1D03               	btfss	3,2
  1485  0084  0008               	return
  1486                           
  1487                           ;main.c: 167: {
  1488                           ;main.c: 168: buttonPressed = 0;
  1489  0085  01B7               	clrf	_buttonPressed
  1490                           
  1491                           ;main.c: 169: inputs[BUTTON_0_POS] = DebounceInput(PORTAbits.RA5,tempInput + BUTTON_0_PO
      +                          S, inputs[BUTTON_0_POS]);
  1492  0086  303F               	movlw	(low ((_tempInput| 0+6)))& (0+255)
  1493  0087  00F4               	movwf	??_Debounce
  1494  0088  0874               	movf	??_Debounce,w
  1495  0089  00F0               	movwf	DebounceInput@tempState
  1496  008A  0830               	movf	_inputs+6,w
  1497  008B  00F5               	movwf	??_Debounce+1
  1498  008C  0875               	movf	??_Debounce+1,w
  1499  008D  00F1               	movwf	DebounceInput@currentState
  1500  008E  0E05               	swapf	5,w	;volatile
  1501  008F  00F6               	movwf	??_Debounce+2
  1502  0090  0C76               	rrf	??_Debounce+2,w
  1503  0091  3901               	andlw	1
  1504  0092  21F7               	fcall	_DebounceInput
  1505  0093  00F7               	movwf	??_Debounce+3
  1506  0094  0877               	movf	??_Debounce+3,w
  1507  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1508  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1509  0097  00B0               	movwf	_inputs+6
  1510                           
  1511                           ;main.c: 170: buttonPressed = inputs[BUTTON_0_POS];
  1512  0098  0830               	movf	_inputs+6,w
  1513  0099  00F4               	movwf	??_Debounce
  1514  009A  0874               	movf	??_Debounce,w
  1515  009B  00B7               	movwf	_buttonPressed
  1516                           
  1517                           ;main.c: 171: inputs[BUTTON_1_POS] = DebounceInput(PORTBbits.RB0,tempInput + BUTTON_1_PO
      +                          S, inputs[BUTTON_1_POS]);
  1518  009C  3040               	movlw	(low ((_tempInput| 0+7)))& (0+255)
  1519  009D  00F4               	movwf	??_Debounce
  1520  009E  0874               	movf	??_Debounce,w
  1521  009F  00F0               	movwf	DebounceInput@tempState
  1522  00A0  0831               	movf	_inputs+7,w
  1523  00A1  00F5               	movwf	??_Debounce+1
  1524  00A2  0875               	movf	??_Debounce+1,w
  1525  00A3  00F1               	movwf	DebounceInput@currentState
  1526  00A4  0806               	movf	6,w	;volatile
  1527  00A5  3901               	andlw	1
  1528  00A6  21F7               	fcall	_DebounceInput
  1529  00A7  00F6               	movwf	??_Debounce+2
  1530  00A8  0876               	movf	??_Debounce+2,w
  1531  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  1532  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  1533  00AB  00B1               	movwf	_inputs+7
  1534                           
  1535                           ;main.c: 172: buttonPressed |= (inputs[BUTTON_1_POS] << 1);
  1536  00AC  0831               	movf	_inputs+7,w
  1537  00AD  00F4               	movwf	??_Debounce
  1538  00AE  0774               	addwf	??_Debounce,w
  1539  00AF  00F5               	movwf	??_Debounce+1
  1540  00B0  0875               	movf	??_Debounce+1,w
  1541  00B1  04B7               	iorwf	_buttonPressed,f
  1542                           
  1543                           ;main.c: 173: inputs[BUTTON_2_POS] = DebounceInput(PORTBbits.RB3,tempInput + BUTTON_2_PO
      +                          S, inputs[BUTTON_2_POS]);
  1544  00B2  3041               	movlw	(low ((_tempInput| 0+8)))& (0+255)
  1545  00B3  00F4               	movwf	??_Debounce
  1546  00B4  0874               	movf	??_Debounce,w
  1547  00B5  00F0               	movwf	DebounceInput@tempState
  1548  00B6  0832               	movf	_inputs+8,w
  1549  00B7  00F5               	movwf	??_Debounce+1
  1550  00B8  0875               	movf	??_Debounce+1,w
  1551  00B9  00F1               	movwf	DebounceInput@currentState
  1552  00BA  0C06               	rrf	6,w	;volatile
  1553  00BB  00F6               	movwf	??_Debounce+2
  1554  00BC  0CF6               	rrf	??_Debounce+2,f
  1555  00BD  0C76               	rrf	??_Debounce+2,w
  1556  00BE  3901               	andlw	1
  1557  00BF  21F7               	fcall	_DebounceInput
  1558  00C0  00F7               	movwf	??_Debounce+3
  1559  00C1  0877               	movf	??_Debounce+3,w
  1560  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1561  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  1562  00C4  00B2               	movwf	_inputs+8
  1563                           
  1564                           ;main.c: 174: buttonPressed |= (inputs[BUTTON_2_POS] << 2);
  1565  00C5  0832               	movf	_inputs+8,w
  1566  00C6  00F4               	movwf	??_Debounce
  1567  00C7  3001               	movlw	1
  1568  00C8                     u36_25:	
  1569  00C8  1003               	clrc
  1570  00C9  0DF4               	rlf	??_Debounce,f
  1571  00CA  3EFF               	addlw	-1
  1572  00CB  1D03               	skipz
  1573  00CC  28C8               	goto	u36_25
  1574  00CD  1003               	clrc
  1575  00CE  0D74               	rlf	??_Debounce,w
  1576  00CF  00F5               	movwf	??_Debounce+1
  1577  00D0  0875               	movf	??_Debounce+1,w
  1578  00D1  04B7               	iorwf	_buttonPressed,f
  1579  00D2  0008               	return
  1580  00D3                     __end_of_Debounce:	
  1581                           
  1582                           	psect	text9
  1583  01F7                     __ptext9:	
  1584 ;; *************** function _DebounceInput *****************
  1585 ;; Defined at:
  1586 ;;		line 65 in file "ports.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  input           1    wreg     unsigned char 
  1589 ;;  tempState       1    0[COMMON] PTR unsigned char 
  1590 ;;		 -> tempInput(9), 
  1591 ;;  currentState    1    1[COMMON] unsigned char 
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  input           1    3[COMMON] unsigned char 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      unsigned char 
  1596 ;; Registers used:
  1597 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1603 ;;      Params:         2       0       0       0
  1604 ;;      Locals:         1       0       0       0
  1605 ;;      Temps:          1       0       0       0
  1606 ;;      Totals:         4       0       0       0
  1607 ;;Total ram usage:        4 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_Debounce
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           
  1617                           ;psect for function _DebounceInput
  1618  01F7                     _DebounceInput:	
  1619                           
  1620                           ;incstack = 0
  1621                           ; Regs used in _DebounceInput: [wreg-fsr0h+status,2+status,0]
  1622                           ;DebounceInput@input stored from wreg
  1623  01F7  00F3               	movwf	DebounceInput@input
  1624                           
  1625                           ;ports.c: 67: *tempState <<= 1;
  1626  01F8  0870               	movf	DebounceInput@tempState,w
  1627  01F9  0084               	movwf	4
  1628  01FA  1003               	clrc
  1629  01FB  1383               	bcf	3,7	;select IRP bank0
  1630  01FC  0D80               	rlf	0,f
  1631                           
  1632                           ;ports.c: 68: *tempState |= input;
  1633  01FD  0873               	movf	DebounceInput@input,w
  1634  01FE  00F2               	movwf	??_DebounceInput
  1635  01FF  0870               	movf	DebounceInput@tempState,w
  1636  0200  0084               	movwf	4
  1637  0201  0872               	movf	??_DebounceInput,w
  1638  0202  0480               	iorwf	0,f
  1639                           
  1640                           ;ports.c: 74: else if ( 0xFF == 0xFF & *tempState)
  1641                           
  1642                           ;ports.c: 73: }
  1643                           
  1644                           ;ports.c: 71: {
  1645                           ;ports.c: 72: return 0;
  1646                           
  1647                           ;ports.c: 70: if ( 0 == 0xFF & *tempState)
  1648  0203  0870               	movf	DebounceInput@tempState,w
  1649  0204  0084               	movwf	4
  1650  0205  1C00               	btfss	0,0
  1651  0206  2A09               	goto	i1l877
  1652                           
  1653                           ;ports.c: 75: {
  1654                           ;ports.c: 76: return 1;
  1655  0207  3001               	movlw	1
  1656                           
  1657                           ;ports.c: 77: }
  1658  0208  0008               	return
  1659  0209                     i1l877:	
  1660                           
  1661                           ;ports.c: 78: else return currentState;
  1662  0209  0871               	movf	DebounceInput@currentState,w
  1663  020A  0008               	return
  1664  020B                     __end_of_DebounceInput:	
  1665  007E                     btemp	set	126	;btemp
  1666  007E                     wtemp	set	126
  1667  007E                     wtemp0	set	126
  1668  0080                     wtemp1	set	128
  1669  0082                     wtemp2	set	130
  1670  0084                     wtemp3	set	132
  1671  0086                     wtemp4	set	134
  1672  0088                     wtemp5	set	136
  1673  007F                     wtemp6	set	127
  1674  007E                     ttemp	set	126
  1675  007E                     ttemp0	set	126
  1676  0081                     ttemp1	set	129
  1677  0084                     ttemp2	set	132
  1678  0087                     ttemp3	set	135
  1679  007F                     ttemp4	set	127
  1680  007E                     ltemp	set	126
  1681  007E                     ltemp0	set	126
  1682  0082                     ltemp1	set	130
  1683  0086                     ltemp2	set	134
  1684  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         34
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      48
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    DebounceInput@tempState	PTR unsigned char  size(1) Largest target is 9
		 -> tempInput(BANK0[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->_Debounce
    _Debounce->_DebounceInput

Critical Paths under _main in BANK0

    _main->_SetLeds
    _TurnOnLeds->_SetLeds

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _MainInterrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     5      4     374
                                              3 BANK0      9     5      4
                          _InitPorts
                          _InitTimer
                            _SetLeds
                      _TurnOnButtons
                         _TurnOnLeds
                   _checkLevelChange
 ---------------------------------------------------------------------------------
 (1) _checkLevelChange                                     2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _TurnOnLeds                                           0     0      0      66
                            _SetLeds
 ---------------------------------------------------------------------------------
 (2) _SetLeds                                              3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
                      _TurnOnButtons
 ---------------------------------------------------------------------------------
 (1) _TurnOnButtons                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _MainInterrupt                                        6     6      0    1262
                                              8 COMMON     6     6      0
                           _Debounce
 ---------------------------------------------------------------------------------
 (4) _Debounce                                             4     4      0    1262
                                              4 COMMON     4     4      0
                      _DebounceInput
 ---------------------------------------------------------------------------------
 (5) _DebounceInput                                        4     2      2    1262
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPorts
     _TurnOnButtons
   _InitTimer
   _SetLeds
   _TurnOnButtons
   _TurnOnLeds
     _SetLeds
   _checkLevelChange

 _MainInterrupt (ROOT)
   _Debounce
     _DebounceInput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      C      30       3       60.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      3E      10        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Apr 24 13:34:07 2016

checkLevelChange@pastCounter 0038                            pc 0002     __end_of_checkLevelChange 01F7  
                         l41 00DC                           l63 0145                           l59 0130  
                         fsr 0004                          l943 01F1                          l971 015A  
                        l991 00FA                          l977 00E2                          l987 00F5  
                        l997 0102                          u285 017C                          u295 018C  
                        fsr0 0004                          indf 0000       __size_of_TurnOnButtons 000A  
                       S1103 023B              ??_MainInterrupt 0078                         l1003 0108  
                       l1031 0132                         l1025 0128                         l1017 011C  
                       l1009 0111                         l1035 013C                         l1027 012A  
                       l1037 0142                         l1047 0154                         l1049 0159  
                       _PIR1 000C                         _TMR1 000E                         _main 00D3  
                       btemp 007E                         ltemp 007E                         start 0010  
                       ttemp 007E                         wtemp 007E             _readCurrentState 004F  
            __end_of_SetLeds 019D                        ?_main 0045                        _T1CON 0010  
                      i1l877 0209                        u36_25 00C8                        _TRISA 0085  
                      _TRISB 0086                        pclath 000A                        ltemp0 007E  
                      ltemp1 0082                        ltemp2 0086                        ltemp3 0080  
                      ttemp0 007E                        ttemp1 0081                        ttemp2 0084  
                      ttemp3 0087                        ttemp4 007F  checkLevelChange@returnValue 0043  
                      status 0003                        wtemp0 007E                        wtemp1 0080  
                      wtemp2 0082                        wtemp3 0084                        wtemp4 0086  
                      wtemp5 0088                        wtemp6 007F             __end_of_Debounce 00D3  
              _TurnOnButtons 0229              __initialization 0011                 __end_of_main 016C  
                     ??_main 0049                main@mainState 004C                       i1l1071 01BA  
                     i1l1067 01AF               _debounceStates 0020           __size_of_InitTimer 0011  
         __size_of_InitPorts 0019                    ??_SetLeds 0042               ?_TurnOnButtons 0070  
                     _inputs 002A                       saved_w 007E                  SetLeds@leds 0044  
    __end_of__initialization 0016                   _TurnOnLeds 021C               __pcstackCOMMON 0070  
          ?_checkLevelChange 0070           ??_checkLevelChange 0042            __end_of_InitTimer 021C  
          __end_of_InitPorts 01E1                    ?_Debounce 0070                _buttonPressed 0037  
                 __pbssBANK0 0020              ??_TurnOnButtons 0042       __size_of_DebounceInput 0014  
                 __pmaintext 00D3                   __pintentry 0004                   ??_Debounce 0074  
      __end_of_MainInterrupt 01C8                      _SetLeds 016C                  ?_TurnOnLeds 0070  
                 _buttonMode 004E                      __ptext1 01E1                      __ptext2 021C  
                    __ptext3 016C                      __ptext4 020B                      __ptext5 01C8  
                    __ptext6 0229                      __ptext7 019D                      __ptext8 0018  
                    __ptext9 01F7                _DebounceInput 01F7                    _T1CONbits 0010  
                    _waiting 0035                      clrloop0 0234         end_of_initialization 0016  
             ?_DebounceInput 0070                    _PORTAbits 0005                    _PORTBbits 0006  
                  _TRISAbits 0085                    _TRISBbits 0086          __size_of_TurnOnLeds 000D  
           main@currentLevel 004B          start_initialization 0011                    _InitTimer 020B  
                  _InitPorts 01C8            __size_of_Debounce 00BB    __size_of_checkLevelChange 0016  
            ??_DebounceInput 0072           DebounceInput@input 0073                    ___latbits 0000  
              __pcstackBANK0 0042                   ?_InitTimer 0070                   ?_InitPorts 0070  
                  __pnvBANK0 004E        __end_of_TurnOnButtons 0233                     ?_SetLeds 0070  
               ??_TurnOnLeds 0045            main@emergencyStop 004A                    __pswtext1 023B  
         __end_of_TurnOnLeds 0229            interrupt_function 0004                    clear_ram0 0233  
                   _PIE1bits 008C                    _tempInput 0039                     _PIR1bits 000C  
     __size_of_MainInterrupt 002B                     _Debounce 0018                  ??_InitTimer 0042  
                ??_InitPorts 0042             _checkLevelChange 01E1             __size_of_SetLeds 0031  
              _MainInterrupt 019D                     _msPassed 0033                __size_of_main 0099  
                   main@argc 0045                     main@argv 0047                     intlevel1 0000  
             ?_MainInterrupt 0070       DebounceInput@tempState 0070        __end_of_DebounceInput 020B  
        main@movingDirection 004D    DebounceInput@currentState 0071  
